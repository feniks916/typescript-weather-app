{"version":3,"sources":["store/actions/alertAction.ts","store/types.ts","components/Search.tsx","store/actions/weatherAction.ts","components/Alert.tsx","components/Weather.tsx","App.tsx","store/reducers/weatherReducer.ts","store/reducers/alertReducer.ts","store/index.ts","index.tsx"],"names":["setAlert","message","type","payload","Search","title","dispatch","useDispatch","useState","city","setCity","className","onSubmit","e","preventDefault","trim","a","code","process","console","log","fetch","res","ok","json","resData","Error","getWeather","placeholder","style","maxWidth","value","onChange","currentTarget","margin","Alert","onClose","justifyContent","onClick","Weather","data","fahrenheit","main","temp","toFixed","celsius","marginBottom","name","sys","country","alignItems","weather","description","src","icon","alt","humidity","pressure","wind","speed","App","weatherData","useSelector","state","loading","error","alertMsg","alert","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de8b1d9f.chunk.js","sourcesContent":["import {SET_ALERT, AlertAction} from '../types'\r\n\r\nexport const setAlert = (message: string): AlertAction => {\r\n    return {\r\n        type: SET_ALERT,\r\n        payload: message\r\n    }\r\n}","export const GET_WEATHER = 'GET_WEATHER';\r\nexport const SET_LOADING = 'SET_LOADING';\r\nexport const SET_ERROR = 'SET_ERROR';\r\nexport const SET_ALERT = 'SET_ALERT';\r\n\r\n//API Part\r\n\r\nexport interface Weather {\r\n    id: number,\r\n    main: string,\r\n    description: string,\r\n    icon: string\r\n};\r\n\r\nexport interface WeatherData {\r\n    base: string;\r\n    clouds: {\r\n        all: number;\r\n    };\r\n    cod: number;\r\n    coord:\r\n    {\r\n        lon: number;\r\n        lat: number;\r\n    };\r\n    dt: number;\r\n    sys: {\r\n        type: number;\r\n        id: number;\r\n        message: number;\r\n        country: string;\r\n        sunrise: number;\r\n        sunset: number;\r\n    }\r\n    timezone: number;\r\n    id: number;\r\n    name: string;\r\n    wind: {\r\n        speed: number;\r\n        deg: number;\r\n    }\r\n    main: {\r\n        feels_like: number;\r\n        humidity: number;\r\n        pressure: number;\r\n        temp: number;\r\n        temp_max: number;\r\n        temp_min: number;\r\n    }\r\n    visibility: number;\r\n    weather: Weather[];\r\n}\r\n\r\nexport interface WeatherError {\r\n    cod: string;\r\n    message: string;\r\n};\r\n\r\nexport interface WeatherState {\r\n    data: WeatherData | null;\r\n    loading: boolean;\r\n    error: string;\r\n}\r\n\r\n// Actions Part\r\n\r\ninterface GetWeatherAction {\r\n    type: typeof GET_WEATHER;\r\n    payload: WeatherData\r\n}\r\n\r\ninterface SetLoadingAction {\r\n    type: typeof SET_LOADING\r\n}\r\n\r\ninterface SetErrorAction {\r\n    type: typeof SET_ERROR;\r\n    payload: string;\r\n}\r\n\r\nexport type WeatherAction = GetWeatherAction | SetLoadingAction | SetErrorAction;\r\n\r\nexport interface AlertAction {\r\n    type: typeof SET_ALERT;\r\n    payload: string;\r\n}\r\n\r\nexport interface Alertstate {\r\n    message: string;\r\n}\r\n\r\n","import React, { FC, useState, FormEvent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setAlert } from '../store/actions/alertAction';\r\nimport { setLoading } from '../store/actions/weatherAction';\r\nimport { getWeather } from './../store/actions/weatherAction';\r\n\r\ninterface SearchProps {\r\n    title: string\r\n}\r\n\r\nconst Search: FC<SearchProps> = ({ title }) => {\r\n    const dispatch = useDispatch();\r\n    const [city, setCity] = useState('');\r\n\r\n    const changeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setCity(e.currentTarget.value)\r\n    }\r\n\r\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if(city.trim() === '') {\r\n            return dispatch(setAlert('City is required!'))\r\n        }\r\n\r\n        dispatch(setLoading());\r\n        dispatch(getWeather(city));\r\n        setCity('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"hero is-light has-text-centered\">\r\n            <div className=\"hero_body\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"title\">{title}</h1>\r\n                    <form className=\"py-S\" onSubmit={submitHandler}>\r\n                        <input type=\"text\"\r\n                        className=\"input has-text-centered mb-2\"\r\n                        placeholder=\"Enter city name\"\r\n                        style={{maxWidth: 300}}\r\n                        value={city}\r\n                        onChange={changeHandler}\r\n                        />\r\n                        <button className=\"button is-primary is-fullwidth\" style={{maxWidth: 300, margin: '0 auto'}}>Search</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n","import {ThunkAction} from 'redux-thunk' ;\r\n\r\nimport {RootState} from '..';\r\n\r\nimport { WeatherError, WeatherAction, WeatherData, GET_WEATHER, SET_ERROR, SET_LOADING} from './../types';\r\n\r\nexport const getWeather = (city: string) : ThunkAction<void, RootState, null, WeatherAction> => {\r\n    return async dispatch => {\r\n        try {\r\n            const code = process.env.REACT_APP_API_KEY\r\n            console.log(code)\r\n            const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${code}`);\r\n\r\n            if(!res.ok) {\r\n                const resData: WeatherError = await res.json();\r\n                throw new Error(resData.message)\r\n            }\r\n\r\n            const resData: WeatherData = await res. json();\r\n            dispatch({\r\n                type: GET_WEATHER,\r\n                payload: resData\r\n            })\r\n        } catch (error) {\r\n            dispatch({\r\n                type: SET_ERROR,\r\n                payload: error.message \r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const setLoading = (): WeatherAction => {\r\n    return{\r\n        type: SET_LOADING\r\n    }\r\n}\r\n\r\nexport const setError = (): WeatherAction => {\r\n    return {\r\n        type: SET_ERROR,\r\n        payload: ''\r\n    }\r\n}\r\n","import React, { FC } from 'react'\r\n\r\ninterface AlertProps {\r\n    message: string;\r\n    onClose: () => void;\r\n}\r\n\r\nconst Alert: FC<AlertProps> = ({ message, onClose }) => {\r\n    return (\r\n        <div className=\"modal is-active has-text-centered\">\r\n            <div className=\"modal-background\">\r\n                <div className=\"modal-card\">\r\n                    <header className=\"modal-card-head has-background-danger\">\r\n                        <p className=\"modal-card-title has-text-white\">{message}</p>\r\n                    </header>\r\n                    <footer className=\"modal-card-foot\" style={{ justifyContent: 'center' }}>\r\n                        <button className=\"button\" onClick={onClose}>Close</button>\r\n                    </footer>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n","import React, {FC} from 'react'\r\n\r\nimport {WeatherData} from '../store/types';\r\n\r\ninterface WeatherProps {\r\n    data: WeatherData;\r\n}\r\n\r\nconst Weather: FC<WeatherProps> = ({data}) => {\r\n    const fahrenheit = (data.main.temp * 1.8 - 459.67).toFixed(2);\r\n    const celsius = (data.main.temp - 273.15).toFixed(2);\r\n\r\n    return (\r\n        <section className=\"section\">\r\n            <div className=\"constainer\">\r\n            <div className=\"container\">\r\n        <h1 className=\"title has-text-centered\" style={{marginBottom: 50}}>{data.name} - {data.sys.country}</h1>\r\n        <div className=\"level\" style={{alignItems: 'flex-start'}}>\r\n          <div className=\"level-item has-text-centered\">\r\n            <div>\r\n              <p className=\"heading\">{data.weather[0].description}</p>\r\n              <p className=\"title\"><img src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`} alt=\"\"/></p>\r\n            </div>\r\n          </div>\r\n          <div className=\"level-item has-text-centered\">\r\n            <div>\r\n              <p className=\"heading\">temp</p>\r\n              <div className=\"title\">\r\n                <p className=\"mb-2\">{data.main.temp}K</p>\r\n                <p className=\"mb-2\">{fahrenheit}<sup>&#8457;</sup></p>\r\n                <p>{celsius}<sup>&#8451;</sup></p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"level-item has-text-centered\">\r\n            <div>\r\n              <p className=\"heading\">humidity</p>\r\n              <p className=\"title\">{data.main.humidity}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"level-item has-text-centered\">\r\n            <div>\r\n              <p className=\"heading\">pressure</p>\r\n              <p className=\"title\">{data.main.pressure}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"level-item has-text-centered\">\r\n            <div>\r\n              <p className=\"heading\">wind</p>\r\n              <p className=\"title\">{data.wind.speed} m/s</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n","import React, { FC } from 'react'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './App.scss';\r\nimport { RootState } from './store';\r\nimport Search from './components/Search';\r\nimport Alert from './components/Alert';\r\nimport Weather from './components/Weather';\r\nimport { setAlert } from './store/actions/alertAction';\r\nimport { setError } from './store/actions/weatherAction';\r\n\r\n\r\n\r\nconst App: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const weatherData = useSelector((state: RootState) => state.weather.data)\r\n    const loading = useSelector((state: RootState) => state.weather.loading)\r\n    const error = useSelector((state: RootState) => state.weather.error)\r\n    const alertMsg = useSelector((state: RootState) => state.alert.message)\r\n\r\n\r\n    return (\r\n        <div className=\"has-text-centered\">\r\n            <Search title=\"Enter city name and press search button\" />\r\n            {loading ? <h2 className=\"is-size-3 py-2\">Loading...</h2> : weatherData && <Weather data={weatherData} />}\r\n            {alertMsg && <Alert message={alertMsg} onClose={() => dispatch(setAlert(''))} />}\r\n            {error && <Alert message={error} onClose={() => dispatch(setError())} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { GET_WEATHER, SET_LOADING, WeatherState, WeatherAction, SET_ERROR } from \"../types\";\r\n\r\nconst initialState: WeatherState = {\r\n    data: null,\r\n    loading: false,\r\n    error: '',\r\n}\r\n\r\nexport default (state = initialState, action: WeatherAction): WeatherState => {\r\n    switch (action.type) {\r\n        case GET_WEATHER:\r\n            return {\r\n                data: action.payload,\r\n                loading: false,\r\n                error: ''\r\n            }\r\n        case SET_LOADING: \r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case SET_ERROR: \r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                loading: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { Alertstate, AlertAction, SET_ALERT } from './../types';\r\n\r\nconst initialState: Alertstate = {\r\n    message: ''\r\n}\r\n\r\n\r\nexport default (state = initialState, action: AlertAction): Alertstate => {\r\n    switch (action.type) {\r\n        case SET_ALERT:\r\n            return {\r\n                message: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport weatherReducer from './reducers/weatherReducer';\r\nimport alertReducer from './reducers/alertReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    weather: weatherReducer,\r\n    alert: alertReducer\r\n});\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport '../node_modules/bulma/css/bulma.min.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}